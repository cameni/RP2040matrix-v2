// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// ps_128_data //
// ----------- //

#define ps_128_data_wrap_target 0
#define ps_128_data_wrap 14

#define ps_128_data_offset_entry_data 0u
#define ps_128_data_offset_shift0 0u

static const uint16_t ps_128_data_program_instructions[] = {
            //     .wrap_target
    0xe03f, //  0: set    x, 31           side 0     
    0xe040, //  1: set    y, 0            side 0     
    0xc020, //  2: irq    wait 0          side 0     
    0x80a0, //  3: pull   block           side 0     
    0x600c, //  4: out    pins, 12        side 0     
    0x7064, //  5: out    null, 4         side 1     
    0x10a8, //  6: jmp    x != y, 8       side 1     
    0xe001, //  7: set    pins, 1         side 0     
    0x610c, //  8: out    pins, 12        side 0 [1] 
    0x91a0, //  9: pull   block           side 1 [1] 
    0x610c, // 10: out    pins, 12        side 0 [1] 
    0x7164, // 11: out    null, 4         side 1 [1] 
    0x610c, // 12: out    pins, 12        side 0 [1] 
    0x1043, // 13: jmp    x--, 3          side 1     
    0xc041, // 14: irq    clear 1         side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ps_128_data_program = {
    .instructions = ps_128_data_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config ps_128_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ps_128_data_wrap_target, offset + ps_128_data_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
static inline void ps_128_data_program_init(PIO pio, uint sm, uint offset,
    int outBase, int outCnt,
    int setBase, int setCnt,
    int sideBase, int sideCnt)
{
    pio_sm_set_consecutive_pindirs(pio, sm, outBase, outCnt, true);  // 2*6 RGB pins
    for (int i = outBase; i < outBase+outCnt; i++) {
        pio_gpio_init(pio, i);
    }
    sm_config_set_out_pins(&c, outBase, outCnt);
    pio_gpio_init(pio, setBase);
    pio_sm_set_consecutive_pindirs(pio, sm, setBase, 1, true);  // LATCH pin
    sm_config_set_set_pins(&c, setBase, 1);
    pio_gpio_init(pio, sideBase);
    pio_sm_set_consecutive_pindirs(pio, sm, sideBase, 1, true);  // CLK pin
    sm_config_set_sideset_pins(&c, sideBase);
    sm_config_set_sideset(&c, 1, false, false);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // sm_config_set_clkdiv(&c, 2);
    sm_config_set_out_shift(&c, true, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + ps_128_data_offset_entry_point);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void ps_hub75_wait_tx_stall(PIO pio, uint sm) {
    uint32_t txstall_mask = 1u << (PIO_FDEBUG_TXSTALL_LSB + sm);
    pio->fdebug = txstall_mask;
    while (!(pio->fdebug & txstall_mask))
        tight_loop_contents();
}

#endif

// ----------- //
// ps_128_ctrl //
// ----------- //

#define ps_128_ctrl_wrap_target 0
#define ps_128_ctrl_wrap 16

#define ps_128_ctrl_offset_entry_ctrl 0u

static const uint16_t ps_128_ctrl_program_instructions[] = {
            //     .wrap_target
    0x8000, //  0: push   noblock                    
    0xe000, //  1: set    pins, 0                    
    0xc040, //  2: irq    clear 0                    
    0xc021, //  3: irq    wait 1                     
    0xe002, //  4: set    pins, 2                    
    0x80a0, //  5: pull   block                      
    0x6005, //  6: out    pins, 5                    
    0x40ed, //  7: in     osr, 13                    
    0x606d, //  8: out    null, 13                   
    0xa046, //  9: mov    y, isr                     
    0x8000, // 10: push   noblock                    
    0x40ed, // 11: in     osr, 13                    
    0xa026, // 12: mov    x, isr                     
    0xe000, // 13: set    pins, 0                    
    0x01b0, // 14: jmp    x != y, 16             [1] 
    0xe002, // 15: set    pins, 2                    
    0x008e, // 16: jmp    y--, 14                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ps_128_ctrl_program = {
    .instructions = ps_128_ctrl_program_instructions,
    .length = 17,
    .origin = -1,
};

static inline pio_sm_config ps_128_ctrl_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ps_128_ctrl_wrap_target, offset + ps_128_ctrl_wrap);
    return c;
}

// ; OUT pins are Row sel pins: 18..22: A .. E
// ; SET pins are LATCH(26) and OE(27)
static inline void ps_128_ctrl_program_init(PIO pio, uint sm, uint offset,
    int outBase, int outCnt,
    int setBase, int setCnt,
    int sideBase, int sideCnt)
{
    pio_sm_config c = ps_128_ctrl_program_get_default_config(offset);
    pio_sm_set_consecutive_pindirs(pio, sm, outBase, outCnt, true);
    for (int i = outBase; i < outBase+outCnt; i++) {
        pio_gpio_init(pio, i);
    }
    sm_config_set_out_pins(&c, outBase, outCnt);
    for (int i = setBase; i < setBase+setCnt; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, setBase, setCnt, true);
    sm_config_set_set_pins(&c, setBase, setCnt);          // LATCH and OE
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // sm_config_set_clkdiv(&c, 2);
    sm_config_set_out_shift(&c, true, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + ps_128_ctrl_offset_entry_point);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

