/*****************************************************
 *
 *	LED matrix driver for Raspberry RP2040 
 *	(c) Peter Schulten, MÃ¼lheim, Germany
 *	peter_(at)_pitschu.de
 *
 *  Unmodified reproduction and distribution of this entire 
 *  source code in any form is permitted provided the above
 *  notice is preserved.
 *  I make this source code available free of charge and therefore
 *  offer neither support nor guarantee for its functionality. 
 *  Furthermore, I assume no liability for the consequences of
 *  its use.
 *  The source code may only be used and modified for private,
 *  non-commercial purposes. Any further use requires my consent.
 *
 *	History
 *	25.01.2022	pitschu		Start of work
 */
; PCB layout V1 pind:
;  11 = LATCH, 12 = OE, side set 13 = CLK
;  Data pins are 0..5: R0, G0, B0, R1, G1, B1
;  Row sel pins are: 6..10: A .. E

.program ps_64_data2
; OUT pins are 0..5: R0, G0, B0, R1, G1, B1
; SET pins are LATCH(11) and OE(12)
; SIDE pin is CLK(13)
.side_set 1

public entry_data2:
.wrap_target
public shift0:
    set x, 15           side 0  ; init loop counter for 64 columns
    irq wait 0          side 0  ; set and wait for IRQ-0 to be reset
loop0:
    pull block          side 0  ; get cols N..N+3 (triggers data DMA channel))
loox:
    out pins, 6         side 0  ; ----------- apply data ----------------------
    out y, 2            side 0
    jmp !y, noOE [2]    side 0  ; enable OE when brightness limit reached
    set pins 0          side 0
noOE:
    jmp !osre, loox [1] side 1
    jmp x--, loop0      side 0
    set pins 3 [5]      side 0  ; last data block in this row: apply LATCH; disable OE
    irq clear 1 [1]     side 0  ; LATCH will be released by ctrl state machine
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

static inline void ps_64_data_program_init(PIO pio, uint sm, uint offset,
    int outBase, int outCnt,
    int setBase, int setCnt,
    int sideBase, int sideCnt)
{
    pio_sm_config c = ps_64_data2_program_get_default_config(offset);

    if (outCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, outBase, outCnt, true);  // 2*6 RGB pins
        for (int i = outBase; i < outBase + outCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_out_pins(&c, outBase, outCnt);
    }

    if (setCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, setBase, setCnt, true);  // LATCH pin
        for (int i = setBase; i < setBase + setCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_set_pins(&c, setBase, setCnt);
    }

    if (sideCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, sideBase, sideCnt, true);  // CLK pin
        for (int i = sideBase; i < sideBase + sideCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_sideset_pins(&c, sideBase);
        sm_config_set_sideset(&c, sideCnt, false, false);
    }
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // sm_config_set_clkdiv(&c, 2);

    sm_config_set_out_shift(&c, true, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + ps_64_data2_offset_entry_data2);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void ps_hub75_wait_tx_stall(PIO pio, uint sm) {
    uint32_t txstall_mask = 1u << (PIO_FDEBUG_TXSTALL_LSB + sm);
    pio->fdebug = txstall_mask;
    while (!(pio->fdebug & txstall_mask))
        tight_loop_contents();
}

%}


.program ps_64_ctrl
; OUT pins are Row sel pins: 6..10: A .. E
; SET pins 11 = LATCH, 12 = OE

public entry_ctrl:

.wrap_target
    irq clear 0         ; starts data state machine
    ;------------ state machine is running
    irq wait 1          ; wait until data state machine is ready      
    set pins, 2         ; disable LATCH, disable OE
    pull block          ; get line address
    out pins, 5         ; set addr lines
.wrap 


% c-sdk {

static inline void ps_64_ctrl_program_init(PIO pio, uint sm, uint offset,
    int outBase, int outCnt,
    int setBase, int setCnt,
    int sideBase, int sideCnt)
{
    pio_sm_config c = ps_64_ctrl_program_get_default_config(offset);

    if (outCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, outBase, outCnt, true);  // 2*6 RGB pins
        for (int i = outBase; i < outBase + outCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_out_pins(&c, outBase, outCnt);
    }

    if (setCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, setBase, setCnt, true);  // LATCH pin
        for (int i = setBase; i < setBase + setCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_set_pins(&c, setBase, setCnt);
    }

    if (sideCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, sideBase, sideCnt, true);  // CLK pin
        for (int i = sideBase; i < sideBase + sideCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_sideset_pins(&c, sideBase);
        sm_config_set_sideset(&c, sideCnt, false, false);
    }

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // sm_config_set_clkdiv(&c, 2);

    sm_config_set_out_shift(&c, true, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + ps_64_ctrl_offset_entry_ctrl);
    pio_sm_set_enabled(pio, sm, true);
}

%}
