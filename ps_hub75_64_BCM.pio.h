// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// ps_64_data2 //
// ----------- //

#define ps_64_data2_wrap_target 0
#define ps_64_data2_wrap 10

#define ps_64_data2_offset_entry_data2 0u
#define ps_64_data2_offset_shift0 0u

static const uint16_t ps_64_data2_program_instructions[] = {
            //     .wrap_target
    0xe02f, //  0: set    x, 15           side 0     
    0xc020, //  1: irq    wait 0          side 0     
    0x80a0, //  2: pull   block           side 0     
    0x6006, //  3: out    pins, 6         side 0     
    0x6042, //  4: out    y, 2            side 0     
    0x0267, //  5: jmp    !y, 7           side 0 [2] 
    0xe000, //  6: set    pins, 0         side 0     
    0x11e3, //  7: jmp    !osre, 3        side 1 [1] 
    0x0042, //  8: jmp    x--, 2          side 0     
    0xe503, //  9: set    pins, 3         side 0 [5] 
    0xc141, // 10: irq    clear 1         side 0 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ps_64_data2_program = {
    .instructions = ps_64_data2_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config ps_64_data2_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ps_64_data2_wrap_target, offset + ps_64_data2_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
static inline void ps_64_data_program_init(PIO pio, uint sm, uint offset,
    int outBase, int outCnt,
    int setBase, int setCnt,
    int sideBase, int sideCnt)
{
    pio_sm_config c = ps_64_data2_program_get_default_config(offset);
    if (outCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, outBase, outCnt, true);  // 2*6 RGB pins
        for (int i = outBase; i < outBase + outCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_out_pins(&c, outBase, outCnt);
    }
    if (setCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, setBase, setCnt, true);  // LATCH pin
        for (int i = setBase; i < setBase + setCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_set_pins(&c, setBase, setCnt);
    }
    if (sideCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, sideBase, sideCnt, true);  // CLK pin
        for (int i = sideBase; i < sideBase + sideCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_sideset_pins(&c, sideBase);
        sm_config_set_sideset(&c, sideCnt, false, false);
    }
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // sm_config_set_clkdiv(&c, 2);
    sm_config_set_out_shift(&c, true, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + ps_64_data2_offset_entry_data2);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void ps_hub75_wait_tx_stall(PIO pio, uint sm) {
    uint32_t txstall_mask = 1u << (PIO_FDEBUG_TXSTALL_LSB + sm);
    pio->fdebug = txstall_mask;
    while (!(pio->fdebug & txstall_mask))
        tight_loop_contents();
}

#endif

// ---------- //
// ps_64_ctrl //
// ---------- //

#define ps_64_ctrl_wrap_target 0
#define ps_64_ctrl_wrap 4

#define ps_64_ctrl_offset_entry_ctrl 0u

static const uint16_t ps_64_ctrl_program_instructions[] = {
            //     .wrap_target
    0xc040, //  0: irq    clear 0                    
    0xc021, //  1: irq    wait 1                     
    0xe002, //  2: set    pins, 2                    
    0x80a0, //  3: pull   block                      
    0x6005, //  4: out    pins, 5                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ps_64_ctrl_program = {
    .instructions = ps_64_ctrl_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config ps_64_ctrl_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ps_64_ctrl_wrap_target, offset + ps_64_ctrl_wrap);
    return c;
}

static inline void ps_64_ctrl_program_init(PIO pio, uint sm, uint offset,
    int outBase, int outCnt,
    int setBase, int setCnt,
    int sideBase, int sideCnt)
{
    pio_sm_config c = ps_64_ctrl_program_get_default_config(offset);
    if (outCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, outBase, outCnt, true);  // 2*6 RGB pins
        for (int i = outBase; i < outBase + outCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_out_pins(&c, outBase, outCnt);
    }
    if (setCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, setBase, setCnt, true);  // LATCH pin
        for (int i = setBase; i < setBase + setCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_set_pins(&c, setBase, setCnt);
    }
    if (sideCnt > 0)
    {
        pio_sm_set_consecutive_pindirs(pio, sm, sideBase, sideCnt, true);  // CLK pin
        for (int i = sideBase; i < sideBase + sideCnt; i++) {
            pio_gpio_init(pio, i);
        }
        sm_config_set_sideset_pins(&c, sideBase);
        sm_config_set_sideset(&c, sideCnt, false, false);
    }
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // sm_config_set_clkdiv(&c, 2);
    sm_config_set_out_shift(&c, true, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + ps_64_ctrl_offset_entry_ctrl);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

